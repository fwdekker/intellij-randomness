name: CD

on:
  workflow_dispatch:
    inputs:
      checklist_complete:
        description: 'I have read and completed the release checklist'
        type: boolean
        default: false
      dry_run:
        description: 'Dry run'
        type: boolean
        default: true

permissions:
  contents: write

jobs:
  pre-flight-checks:
    runs-on: ubuntu-latest

    outputs:
      MY_VERSION: ${{ steps.my_version.outputs.MY_VERSION }}

    steps:
      - name: Print inputs
        run: |
          printf "dry_run: '%s'\n" '${{ github.event.inputs.dry_run }}'
          printf "checklist_complete: '%s'\n" '${{ github.event.inputs.checklist_complete }}'
      - name: Checkout
        uses: actions/checkout@v4
      - name: Extract Randomness version number
        id: my_version
        run: |
          MY_VERSION="v$(cat gradle.properties | grep '^version=' | sed 's/^.*=//')"
          printf "Found version '%s'.\n" "$MY_VERSION"
          printf "MY_VERSION=%s\n" "$MY_VERSION" >> "$GITHUB_ENV"
          printf "MY_VERSION=%s\n" "$MY_VERSION" >> "$GITHUB_OUTPUT"
      - name: "Check: Release checklist completed"
        run: |
          ! test '${{ github.event.inputs.checklist_complete }}' = 'false'
      - name: "Check: Current branch is 'main'"
        if: ${{ github.event.inputs.dry_run == 'false' }}
        run: |
          test '${{ github.ref }}' = 'refs/heads/main'
      - name: "Check: Version does not start with 9.9.9"
        if: ${{ github.event.inputs.dry_run == 'false' }}
        run: |
          test "$MY_VERSION" = "${MY_VERSION#9.9.9}"
      - name: "Check: Version number is formatted correctly"
        if: ${{ github.event.inputs.dry_run == 'false' }}
        run: |
          expr "$MY_VERSION" : '^v[[:digit:]]\+\.[[:digit:]]\+\.[[:digit:]]\+$' >/dev/null
      - name: "Check: Version is listed in changelog"
        if: ${{ github.event.inputs.dry_run == 'false' }}
        run: |
          grep -qF "## ${MY_VERSION#v} -- " CHANGELOG.md
      - name: "Check: Changelog does not contain string 'TODO'"
        if: ${{ github.event.inputs.dry_run == 'false' }}
        run: |
          ! grep -qF "TODO" CHANGELOG.md
      - name: "Check: Release does not already exist"
        if: ${{ github.event.inputs.dry_run == 'false' }}
        # Using `fetch-tags` option of `actions/checkout` does not work properly
        run: |
          git fetch --prune --unshallow --tags
          ! git show-ref --tags "$MY_VERSION" --quiet

  release-plugin:
    needs: [ pre-flight-checks ]
    runs-on: ubuntu-latest

    env:
      MY_VERSION: ${{ needs.pre-flight-checks.outputs.MY_VERSION }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          add-job-summary: on-failure
          cache-encryption-key: ${{ secrets.GRADLE_ENCRYPTION_KEY }}

      - name: Build and sign plugin
        env:
          CERTIFICATE_CHAIN: ${{ secrets.JB_CERTIFICATE_CHAIN }}
          PRIVATE_KEY: ${{ secrets.JB_PRIVATE_KEY }}
          PRIVATE_KEY_PASSWORD: ${{ secrets.JB_PRIVATE_KEY_PASSWORD }}
        run: ./gradlew signPlugin

      - name: Publish plugin to JetBrains Marketplace
        if: ${{ github.event.inputs.dry_run == 'false' }}
        env:
          PUBLISH_TOKEN: ${{ secrets.JB_PUBLISH_TOKEN }}
          CERTIFICATE_CHAIN: ${{ secrets.JB_CERTIFICATE_CHAIN }}
          PRIVATE_KEY: ${{ secrets.JB_PRIVATE_KEY }}
          PRIVATE_KEY_PASSWORD: ${{ secrets.JB_PRIVATE_KEY_PASSWORD }}
        run: ./gradlew publishPlugin

      - name: Extract release notes
        run: |
          printf "%s\n\n%s\n" \
            "This plugin is also available on the [plugin repository](https://plugins.jetbrains.com/plugin/9836-randomness)." \
            "$(awk "/^## ${MY_VERSION#v}/{flag=1;next}; /^## /{flag=0}; {if (flag==1) {print}}" CHANGELOG.md)" \
            | tee RELEASE_NOTES.md
      - name: Publish release
        if: ${{ github.event.inputs.dry_run == 'false' }}
        env:
          GH_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: |
          gh release create "$MY_VERSION" \
            "build/distributions/"*"-signed.zip" \
            --title "$MY_VERSION" \
            --notes-file RELEASE_NOTES.md \
            --target main


  release-pages:
    needs: [ pre-flight-checks, release-plugin ]
    runs-on: ubuntu-latest

    env:
      MY_VERSION: ${{ needs.pre-flight-checks.outputs.MY_VERSION }}

    steps:
      - name: Checkout Randomness source code
        uses: actions/checkout@v4
        with:
          ref: main
          path: main
      - name: Checkout Randomness pages
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          path: gh-pages
          # Required to push updated documentation to repository.
          # If you get "Error: fatal: could not read Username for 'https://github.com': terminal prompts disabled", then
          # the token has probably expired.
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          add-job-summary: on-failure
          cache-encryption-key: ${{ secrets.GRADLE_ENCRYPTION_KEY }}

      - name: Generate new documentation
        working-directory: main/
        run: ./gradlew dokkaHtml -Pdokka.pagesDir='${{ github.workspace }}/gh-pages/'

      - name: Move new documentation into gh-pages
        run: |
          rm -rf gh-pages/*
          mv main/build/dokka/html/* gh-pages/

      - name: Push new documentation
        if: ${{ github.event.inputs.dry_run == 'false' }}
        working-directory: gh-pages/
        run: |
          git config --global user.name "fwdekkerbot"
          git config --global user.email "bot@fwdekker.com"
          git add --all
          git commit -m "Update for $MY_VERSION"

          git push origin gh-pages
